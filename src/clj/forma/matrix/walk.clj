(ns forma.matrix.walk
  (:use cascalog.api
        [forma.matrix.utils :only (insert-into-val
                                   insert-at)]))

(defn walk-matrix
  "Walks along the rows and columns of a matrix at the given window
  size, returning all (window x window) snapshots."
  [m window]
  (mapcat (comp
           (partial apply map vector)
           (partial map (partial partition window 1)))
          (partition window 1 m)))

(defn buffer-matrix
  "For the supplied matrix `mat`, returns a new matrix generated by
  padding the beginning and end of each row and column with the
  supplied value, repeated `buffer-size` times. For example:

  (def test-matrix [[0 1 2]
                    [3 4 5]])

  (buffer-matrix 2 1 test-matrix)
  => [[1 1 1 1 1 1 1]
      [1 1 1 1 1 1 1]
      [1 1 0 1 2 1 1]
      [1 1 3 4 5 1 1]
      [1 1 1 1 1 1 1]
      [1 1 1 1 1 1 1]]"
  [buffer-size val [row :as mat]]
  (let [n (-> buffer-size (* 2) (+ (count row)))
        buf-row (repeat n val)]
    (insert-at buffer-size
               (repeat (* 2 buffer-size) buf-row)
               (for [row mat]
                 (insert-into-val val buffer-size n row)))))

(defn windowed-function
  "apply a function `fn` to each element in a matrix `mat` over a moving
  window, defined by the number of neighbors."
  [f num-neighbors mat]
  {:pre [(> (count mat)
            (inc (* 2 num-neighbors)))]}
  (let [window  (+ 1 (* 2 num-neighbors))
        new-mat (buffer-matrix num-neighbors nil mat)]
    (map (comp
          (partial apply f)
          (partial filter (complement nil?))
          flatten)
         (walk-matrix new-mat window))))
