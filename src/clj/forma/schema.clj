(ns forma.schema)

;; ### Fire Values

(def example-fire-value
  {:temp-330   "number of fires w/ (> T 330 degrees Kelvin)"
   :conf-50    "number of fires w/ confidence above 50."
   :both-preds "number of fires w/ both."
   :count      "number of fires on the given day."})

(defn fire-value
  [t-above-330 c-above-50 both-preds count]
  {:temp-330 t-above-330
   :conf-50 c-above-50
   :both-preds both-preds
   :count count})

(defn extract-fields
  "Returns a vector containing the value of the `temp-330`, `conf-50`,
  `both-preds` and `count` fields of the supplied fire tuple."
  [tuple]
  (map tuple [:temp-330 :conf-50 :both-preds :count]))

(defn add-fires
  "Returns a new `FireTuple` object generated by summing up the fields
  of each of the supplied `FireTuple` objects."
  [& f-tuples]
  (apply merge-with + f-tuples))

;; # Compound Objects

;; Replacing FormaValue:
;;
;; struct FormaValue {
;;   1: FireTuple fireValue;
;;   2: double shortDrop;
;;   3: double longDrop;
;;   4: double tStat;
;; }

(def example-forma-value
  {:fire-value "fire value."
   :short-drop "Short term drop in NDVI."
   :long-drop  "Long term drop in NDVI."
   :t-stat     "t-statistic for the relevant month."})

(defn forma-value
  [fire short long t-stat]
  {:fire-value (or fire (fire-value 0 0 0 0))
   :short-drop short
   :long-drop  long
   :t-stat     t-stat})

(defn unpack-forma-val
  "Returns a vector containing the fire value, short drop,
  long drop and t-stat fields of the supplied `FormaValue`."
  [forma-val]
  (map forma-val [:fire-value :short-drop :long-drop :t-stat]))

;; ## Neighbor Values

(def example-forma-neighbor-value
  {:fire-value     "fire value."
   :num-neighbors  "Number of non-nil neighbors."
   :avg-short-drop "Average..."
   :min-short-drop "min..."
   :avg-long-drop  "Average..."
   :min-long-drop  "min..."
   :avg-t-stat     "Average..."
   :min-t-stat     "min..."})

(defn neighbor-value
  "Accepts either a forma value or a sequence of sub-values."
  ([{:keys [fire-value short-drop long-drop t-stat]}]
     (neighbor-value fire 1 short short long long t t))
  ([fire neighbors avg-short min-short avg-long min-long avg-stat min-stat]
     {:fire-value     fire
      :neighbor-count neighbors
      :avg-short-drop avg-short
      :min-short-drop mon-short
      :avg-long-drop  avg-long
      :min-long-drop  min-long
      :avg-t-stat     avg-stat
      :min-t-stat     min-stat}))

(defn unpack-neighbor-val
  [neighbor-val]
  (map neighbor-val
       [:fire-value
        :neighbor-count
        :avg-short-drop
        :min-short-drop
        :avg-long-drop 
        :min-long-drop 
        :avg-t-stat    
        :min-t-stat]))

(defn merge-neighbors
  "Merges the supplied instance of `FormaValue` into the existing
  aggregate collection of `FormaValue`s represented by
  `neighbor-val`. (`neighbor-val` must be an instance of
  `FormaNeighborValue`."
  [neighbor-val forma-val]
  (let [[fire short long t-stat] (unpack-forma-val forma-val)]
    (-> neighbor-val
        (update-in [:fire-value]     add-fires fire)
        (update-in [:neighbor-count] inc)
        (update-in [:avg-short-drop] u/weighted-mean short 1)
        (update-in [:avg-long-drop]  u/weighted-mean long 1)
        (update-in [:avg-t-stat]     u/weighted-mean t-stat 1)
        (update-in [:min-short-drop] min short)
        (update-in [:min-long-drop]  min long)
        (update-in [:min-t-stat]     min t))))

(defn combine-neighbors
  "Returns a new forma neighbor value generated by merging together
   each entry in the supplied sequence of forma values."
  [[x & more]]
  (if x
    (reduce merge-neighbors (neighbor-value x) more)
    (neighbor-value (fire-value 0 0 0 0) 0 0 0 0 0 0 0)))

(defn textify
  "Converts the supplied coordinates, `FormaValue` and
  `FormaNeighborValue` into a line of text suitable for use in STATA."
  [forma-val neighbor-val]
  (let [[fire-val s-drop l-drop t-drop] (unpack-forma-val forma-val)
        [fire-sum ct short-mean short-min
         long-mean long-min t-mean t-min] (unpack-neighbor-val neighbor-val)
        [k330 c50 ck fire] (extract-fields fire-val)
        [k330-n c50-n ck-n fire-n] (extract-fields fire-sum)]
    (join \tab
          [k330 c50 ck fire s-drop l-drop t-drop
           k330-n c50-n ck-n fire-n
           ct short-mean short-min long-mean long-min t-mean t-min])))


;; ## Time Series

(defn timeseries-value
  ([start-idx series]
     (let [elems (count series)]
       (timeseries-value start
                         (dec (+ start elems))
                         series)))
  ([start-idx end-idx series]
     (when series
       {:start-idx start
        :end-idx   end
        :series    series})))

;; struct FireSeries {
;;   1: i32 startIdx
;;   2: i32 endIdx;
;;   3: list<FireTuple> values
;; }

;; struct TimeSeries {
;;   1: i32 startIdx
;;   2: i32 endIdx;
;;   3: ArrayValue series;
;; }

;; union DataValue {
;;   1: i32 intVal;
;;   2: IntArray ints;
;;   3: double doubleVal;
;;   4: DoubleArray doubles;
;;   5: FireTuple fireVal;
;;   6: TimeSeries timeSeries;
;;   7: FireSeries fireSeries;
;; }

;; struct ModisPixelLocation {
;;   1: string resolution;
;;   2: i32 tileH;
;;   3: i32 tileV;
;;   4: i32 sample;
;;   5: i32 line;
;; }

;; struct ModisChunkLocation {
;;   1: string resolution;
;;   2: i32 tileH;
;;   3: i32 tileV;
;;   4: i32 chunkID;
;;   5: i32 chunkSize;
;; }

;; union LocationPropertyValue {
;;   1: ModisPixelLocation pixelLocation;
;;   2: ModisChunkLocation chunkLocation;
;; }

;; struct LocationProperty {
;;   1: LocationPropertyValue property;
;; }

;; struct DataChunk {
;;   1: string dataset;
;;   2: LocationProperty locationProperty;
;;   3: DataValue chunkValue;
;;   4: string temporalRes;
;;   5: optional string date;
;; }
