/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package forma.schema;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TimeSeries implements TBase<TimeSeries, TimeSeries._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TimeSeries");

  private static final TField START_PERIOD_FIELD_DESC = new TField("startPeriod", TType.I32, (short)1);
  private static final TField END_PERIOD_FIELD_DESC = new TField("endPeriod", TType.I32, (short)2);
  private static final TField VALUES_FIELD_DESC = new TField("values", TType.LIST, (short)3);

  public int startPeriod;
  public int endPeriod;
  public List<FireTuple> values;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    START_PERIOD((short)1, "startPeriod"),
    END_PERIOD((short)2, "endPeriod"),
    VALUES((short)3, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START_PERIOD
          return START_PERIOD;
        case 2: // END_PERIOD
          return END_PERIOD;
        case 3: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTPERIOD_ISSET_ID = 0;
  private static final int __ENDPERIOD_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START_PERIOD, new FieldMetaData("startPeriod", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.END_PERIOD, new FieldMetaData("endPeriod", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.VALUES, new FieldMetaData("values", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, FireTuple.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(TimeSeries.class, metaDataMap);
  }

  public TimeSeries() {
  }

  public TimeSeries(
    int startPeriod,
    int endPeriod,
    List<FireTuple> values)
  {
    this();
    this.startPeriod = startPeriod;
    setStartPeriodIsSet(true);
    this.endPeriod = endPeriod;
    setEndPeriodIsSet(true);
    this.values = values;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimeSeries(TimeSeries other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.startPeriod = other.startPeriod;
    this.endPeriod = other.endPeriod;
    if (other.isSetValues()) {
      List<FireTuple> __this__values = new ArrayList<FireTuple>();
      for (FireTuple other_element : other.values) {
        __this__values.add(new FireTuple(other_element));
      }
      this.values = __this__values;
    }
  }

  public TimeSeries deepCopy() {
    return new TimeSeries(this);
  }

  @Override
  public void clear() {
    setStartPeriodIsSet(false);
    this.startPeriod = 0;
    setEndPeriodIsSet(false);
    this.endPeriod = 0;
    this.values = null;
  }

  public int getStartPeriod() {
    return this.startPeriod;
  }

  public TimeSeries setStartPeriod(int startPeriod) {
    this.startPeriod = startPeriod;
    setStartPeriodIsSet(true);
    return this;
  }

  public void unsetStartPeriod() {
    __isset_bit_vector.clear(__STARTPERIOD_ISSET_ID);
  }

  /** Returns true if field startPeriod is set (has been asigned a value) and false otherwise */
  public boolean isSetStartPeriod() {
    return __isset_bit_vector.get(__STARTPERIOD_ISSET_ID);
  }

  public void setStartPeriodIsSet(boolean value) {
    __isset_bit_vector.set(__STARTPERIOD_ISSET_ID, value);
  }

  public int getEndPeriod() {
    return this.endPeriod;
  }

  public TimeSeries setEndPeriod(int endPeriod) {
    this.endPeriod = endPeriod;
    setEndPeriodIsSet(true);
    return this;
  }

  public void unsetEndPeriod() {
    __isset_bit_vector.clear(__ENDPERIOD_ISSET_ID);
  }

  /** Returns true if field endPeriod is set (has been asigned a value) and false otherwise */
  public boolean isSetEndPeriod() {
    return __isset_bit_vector.get(__ENDPERIOD_ISSET_ID);
  }

  public void setEndPeriodIsSet(boolean value) {
    __isset_bit_vector.set(__ENDPERIOD_ISSET_ID, value);
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  public java.util.Iterator<FireTuple> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(FireTuple elem) {
    if (this.values == null) {
      this.values = new ArrayList<FireTuple>();
    }
    this.values.add(elem);
  }

  public List<FireTuple> getValues() {
    return this.values;
  }

  public TimeSeries setValues(List<FireTuple> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been asigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case START_PERIOD:
      if (value == null) {
        unsetStartPeriod();
      } else {
        setStartPeriod((Integer)value);
      }
      break;

    case END_PERIOD:
      if (value == null) {
        unsetEndPeriod();
      } else {
        setEndPeriod((Integer)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((List<FireTuple>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case START_PERIOD:
      return new Integer(getStartPeriod());

    case END_PERIOD:
      return new Integer(getEndPeriod());

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case START_PERIOD:
      return isSetStartPeriod();
    case END_PERIOD:
      return isSetEndPeriod();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimeSeries)
      return this.equals((TimeSeries)that);
    return false;
  }

  public boolean equals(TimeSeries that) {
    if (that == null)
      return false;

    boolean this_present_startPeriod = true;
    boolean that_present_startPeriod = true;
    if (this_present_startPeriod || that_present_startPeriod) {
      if (!(this_present_startPeriod && that_present_startPeriod))
        return false;
      if (this.startPeriod != that.startPeriod)
        return false;
    }

    boolean this_present_endPeriod = true;
    boolean that_present_endPeriod = true;
    if (this_present_endPeriod || that_present_endPeriod) {
      if (!(this_present_endPeriod && that_present_endPeriod))
        return false;
      if (this.endPeriod != that.endPeriod)
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TimeSeries other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TimeSeries typedOther = (TimeSeries)other;

    lastComparison = Boolean.valueOf(isSetStartPeriod()).compareTo(typedOther.isSetStartPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartPeriod()) {
      lastComparison = TBaseHelper.compareTo(this.startPeriod, typedOther.startPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndPeriod()).compareTo(typedOther.isSetEndPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndPeriod()) {
      lastComparison = TBaseHelper.compareTo(this.endPeriod, typedOther.endPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(typedOther.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = TBaseHelper.compareTo(this.values, typedOther.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // START_PERIOD
          if (field.type == TType.I32) {
            this.startPeriod = iprot.readI32();
            setStartPeriodIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // END_PERIOD
          if (field.type == TType.I32) {
            this.endPeriod = iprot.readI32();
            setEndPeriodIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VALUES
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.values = new ArrayList<FireTuple>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                FireTuple _elem2;
                _elem2 = new FireTuple();
                _elem2.read(iprot);
                this.values.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(START_PERIOD_FIELD_DESC);
    oprot.writeI32(this.startPeriod);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(END_PERIOD_FIELD_DESC);
    oprot.writeI32(this.endPeriod);
    oprot.writeFieldEnd();
    if (this.values != null) {
      oprot.writeFieldBegin(VALUES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.values.size()));
        for (FireTuple _iter3 : this.values)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimeSeries(");
    boolean first = true;

    sb.append("startPeriod:");
    sb.append(this.startPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endPeriod:");
    sb.append(this.endPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

