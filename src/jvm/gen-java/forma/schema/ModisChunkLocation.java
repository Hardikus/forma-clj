/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package forma.schema;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ModisChunkLocation implements TBase<ModisChunkLocation, ModisChunkLocation._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ModisChunkLocation");

  private static final TField RESOLUTION_FIELD_DESC = new TField("resolution", TType.STRING, (short)1);
  private static final TField TILE_H_FIELD_DESC = new TField("tileH", TType.I32, (short)2);
  private static final TField TILE_V_FIELD_DESC = new TField("tileV", TType.I32, (short)3);
  private static final TField CHUNK_ID_FIELD_DESC = new TField("chunkID", TType.I32, (short)4);
  private static final TField CHUNK_SIZE_FIELD_DESC = new TField("chunkSize", TType.I32, (short)5);

  public String resolution;
  public int tileH;
  public int tileV;
  public int chunkID;
  public int chunkSize;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    RESOLUTION((short)1, "resolution"),
    TILE_H((short)2, "tileH"),
    TILE_V((short)3, "tileV"),
    CHUNK_ID((short)4, "chunkID"),
    CHUNK_SIZE((short)5, "chunkSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESOLUTION
          return RESOLUTION;
        case 2: // TILE_H
          return TILE_H;
        case 3: // TILE_V
          return TILE_V;
        case 4: // CHUNK_ID
          return CHUNK_ID;
        case 5: // CHUNK_SIZE
          return CHUNK_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TILEH_ISSET_ID = 0;
  private static final int __TILEV_ISSET_ID = 1;
  private static final int __CHUNKID_ISSET_ID = 2;
  private static final int __CHUNKSIZE_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESOLUTION, new FieldMetaData("resolution", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.TILE_H, new FieldMetaData("tileH", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.TILE_V, new FieldMetaData("tileV", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CHUNK_ID, new FieldMetaData("chunkID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CHUNK_SIZE, new FieldMetaData("chunkSize", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(ModisChunkLocation.class, metaDataMap);
  }

  public ModisChunkLocation() {
  }

  public ModisChunkLocation(
    String resolution,
    int tileH,
    int tileV,
    int chunkID,
    int chunkSize)
  {
    this();
    this.resolution = resolution;
    this.tileH = tileH;
    setTileHIsSet(true);
    this.tileV = tileV;
    setTileVIsSet(true);
    this.chunkID = chunkID;
    setChunkIDIsSet(true);
    this.chunkSize = chunkSize;
    setChunkSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModisChunkLocation(ModisChunkLocation other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetResolution()) {
      this.resolution = other.resolution;
    }
    this.tileH = other.tileH;
    this.tileV = other.tileV;
    this.chunkID = other.chunkID;
    this.chunkSize = other.chunkSize;
  }

  public ModisChunkLocation deepCopy() {
    return new ModisChunkLocation(this);
  }

  @Override
  public void clear() {
    this.resolution = null;
    setTileHIsSet(false);
    this.tileH = 0;
    setTileVIsSet(false);
    this.tileV = 0;
    setChunkIDIsSet(false);
    this.chunkID = 0;
    setChunkSizeIsSet(false);
    this.chunkSize = 0;
  }

  public String getResolution() {
    return this.resolution;
  }

  public ModisChunkLocation setResolution(String resolution) {
    this.resolution = resolution;
    return this;
  }

  public void unsetResolution() {
    this.resolution = null;
  }

  /** Returns true if field resolution is set (has been asigned a value) and false otherwise */
  public boolean isSetResolution() {
    return this.resolution != null;
  }

  public void setResolutionIsSet(boolean value) {
    if (!value) {
      this.resolution = null;
    }
  }

  public int getTileH() {
    return this.tileH;
  }

  public ModisChunkLocation setTileH(int tileH) {
    this.tileH = tileH;
    setTileHIsSet(true);
    return this;
  }

  public void unsetTileH() {
    __isset_bit_vector.clear(__TILEH_ISSET_ID);
  }

  /** Returns true if field tileH is set (has been asigned a value) and false otherwise */
  public boolean isSetTileH() {
    return __isset_bit_vector.get(__TILEH_ISSET_ID);
  }

  public void setTileHIsSet(boolean value) {
    __isset_bit_vector.set(__TILEH_ISSET_ID, value);
  }

  public int getTileV() {
    return this.tileV;
  }

  public ModisChunkLocation setTileV(int tileV) {
    this.tileV = tileV;
    setTileVIsSet(true);
    return this;
  }

  public void unsetTileV() {
    __isset_bit_vector.clear(__TILEV_ISSET_ID);
  }

  /** Returns true if field tileV is set (has been asigned a value) and false otherwise */
  public boolean isSetTileV() {
    return __isset_bit_vector.get(__TILEV_ISSET_ID);
  }

  public void setTileVIsSet(boolean value) {
    __isset_bit_vector.set(__TILEV_ISSET_ID, value);
  }

  public int getChunkID() {
    return this.chunkID;
  }

  public ModisChunkLocation setChunkID(int chunkID) {
    this.chunkID = chunkID;
    setChunkIDIsSet(true);
    return this;
  }

  public void unsetChunkID() {
    __isset_bit_vector.clear(__CHUNKID_ISSET_ID);
  }

  /** Returns true if field chunkID is set (has been asigned a value) and false otherwise */
  public boolean isSetChunkID() {
    return __isset_bit_vector.get(__CHUNKID_ISSET_ID);
  }

  public void setChunkIDIsSet(boolean value) {
    __isset_bit_vector.set(__CHUNKID_ISSET_ID, value);
  }

  public int getChunkSize() {
    return this.chunkSize;
  }

  public ModisChunkLocation setChunkSize(int chunkSize) {
    this.chunkSize = chunkSize;
    setChunkSizeIsSet(true);
    return this;
  }

  public void unsetChunkSize() {
    __isset_bit_vector.clear(__CHUNKSIZE_ISSET_ID);
  }

  /** Returns true if field chunkSize is set (has been asigned a value) and false otherwise */
  public boolean isSetChunkSize() {
    return __isset_bit_vector.get(__CHUNKSIZE_ISSET_ID);
  }

  public void setChunkSizeIsSet(boolean value) {
    __isset_bit_vector.set(__CHUNKSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESOLUTION:
      if (value == null) {
        unsetResolution();
      } else {
        setResolution((String)value);
      }
      break;

    case TILE_H:
      if (value == null) {
        unsetTileH();
      } else {
        setTileH((Integer)value);
      }
      break;

    case TILE_V:
      if (value == null) {
        unsetTileV();
      } else {
        setTileV((Integer)value);
      }
      break;

    case CHUNK_ID:
      if (value == null) {
        unsetChunkID();
      } else {
        setChunkID((Integer)value);
      }
      break;

    case CHUNK_SIZE:
      if (value == null) {
        unsetChunkSize();
      } else {
        setChunkSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESOLUTION:
      return getResolution();

    case TILE_H:
      return new Integer(getTileH());

    case TILE_V:
      return new Integer(getTileV());

    case CHUNK_ID:
      return new Integer(getChunkID());

    case CHUNK_SIZE:
      return new Integer(getChunkSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESOLUTION:
      return isSetResolution();
    case TILE_H:
      return isSetTileH();
    case TILE_V:
      return isSetTileV();
    case CHUNK_ID:
      return isSetChunkID();
    case CHUNK_SIZE:
      return isSetChunkSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModisChunkLocation)
      return this.equals((ModisChunkLocation)that);
    return false;
  }

  public boolean equals(ModisChunkLocation that) {
    if (that == null)
      return false;

    boolean this_present_resolution = true && this.isSetResolution();
    boolean that_present_resolution = true && that.isSetResolution();
    if (this_present_resolution || that_present_resolution) {
      if (!(this_present_resolution && that_present_resolution))
        return false;
      if (!this.resolution.equals(that.resolution))
        return false;
    }

    boolean this_present_tileH = true;
    boolean that_present_tileH = true;
    if (this_present_tileH || that_present_tileH) {
      if (!(this_present_tileH && that_present_tileH))
        return false;
      if (this.tileH != that.tileH)
        return false;
    }

    boolean this_present_tileV = true;
    boolean that_present_tileV = true;
    if (this_present_tileV || that_present_tileV) {
      if (!(this_present_tileV && that_present_tileV))
        return false;
      if (this.tileV != that.tileV)
        return false;
    }

    boolean this_present_chunkID = true;
    boolean that_present_chunkID = true;
    if (this_present_chunkID || that_present_chunkID) {
      if (!(this_present_chunkID && that_present_chunkID))
        return false;
      if (this.chunkID != that.chunkID)
        return false;
    }

    boolean this_present_chunkSize = true;
    boolean that_present_chunkSize = true;
    if (this_present_chunkSize || that_present_chunkSize) {
      if (!(this_present_chunkSize && that_present_chunkSize))
        return false;
      if (this.chunkSize != that.chunkSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_resolution = true && (isSetResolution());
    builder.append(present_resolution);
    if (present_resolution)
      builder.append(resolution);

    boolean present_tileH = true;
    builder.append(present_tileH);
    if (present_tileH)
      builder.append(tileH);

    boolean present_tileV = true;
    builder.append(present_tileV);
    if (present_tileV)
      builder.append(tileV);

    boolean present_chunkID = true;
    builder.append(present_chunkID);
    if (present_chunkID)
      builder.append(chunkID);

    boolean present_chunkSize = true;
    builder.append(present_chunkSize);
    if (present_chunkSize)
      builder.append(chunkSize);

    return builder.toHashCode();
  }

  public int compareTo(ModisChunkLocation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ModisChunkLocation typedOther = (ModisChunkLocation)other;

    lastComparison = Boolean.valueOf(isSetResolution()).compareTo(typedOther.isSetResolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolution()) {
      lastComparison = TBaseHelper.compareTo(this.resolution, typedOther.resolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTileH()).compareTo(typedOther.isSetTileH());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTileH()) {
      lastComparison = TBaseHelper.compareTo(this.tileH, typedOther.tileH);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTileV()).compareTo(typedOther.isSetTileV());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTileV()) {
      lastComparison = TBaseHelper.compareTo(this.tileV, typedOther.tileV);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkID()).compareTo(typedOther.isSetChunkID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkID()) {
      lastComparison = TBaseHelper.compareTo(this.chunkID, typedOther.chunkID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunkSize()).compareTo(typedOther.isSetChunkSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunkSize()) {
      lastComparison = TBaseHelper.compareTo(this.chunkSize, typedOther.chunkSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // RESOLUTION
          if (field.type == TType.STRING) {
            this.resolution = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TILE_H
          if (field.type == TType.I32) {
            this.tileH = iprot.readI32();
            setTileHIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TILE_V
          if (field.type == TType.I32) {
            this.tileV = iprot.readI32();
            setTileVIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CHUNK_ID
          if (field.type == TType.I32) {
            this.chunkID = iprot.readI32();
            setChunkIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CHUNK_SIZE
          if (field.type == TType.I32) {
            this.chunkSize = iprot.readI32();
            setChunkSizeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.resolution != null) {
      oprot.writeFieldBegin(RESOLUTION_FIELD_DESC);
      oprot.writeString(this.resolution);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TILE_H_FIELD_DESC);
    oprot.writeI32(this.tileH);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TILE_V_FIELD_DESC);
    oprot.writeI32(this.tileV);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CHUNK_ID_FIELD_DESC);
    oprot.writeI32(this.chunkID);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CHUNK_SIZE_FIELD_DESC);
    oprot.writeI32(this.chunkSize);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModisChunkLocation(");
    boolean first = true;

    sb.append("resolution:");
    if (this.resolution == null) {
      sb.append("null");
    } else {
      sb.append(this.resolution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tileH:");
    sb.append(this.tileH);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tileV:");
    sb.append(this.tileV);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkID:");
    sb.append(this.chunkID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunkSize:");
    sb.append(this.chunkSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

