/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package forma.schema;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class DataValue extends TUnion<DataValue, DataValue._Fields> {
  private static final TStruct STRUCT_DESC = new TStruct("DataValue");
  private static final TField DOUBLES_FIELD_DESC = new TField("doubles", TType.STRUCT, (short)1);
  private static final TField INTS_FIELD_DESC = new TField("ints", TType.STRUCT, (short)2);
  private static final TField INT_VAL_FIELD_DESC = new TField("intVal", TType.I32, (short)3);
  private static final TField DOUBLE_VAL_FIELD_DESC = new TField("doubleVal", TType.DOUBLE, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    DOUBLES((short)1, "doubles"),
    INTS((short)2, "ints"),
    INT_VAL((short)3, "intVal"),
    DOUBLE_VAL((short)4, "doubleVal");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOUBLES
          return DOUBLES;
        case 2: // INTS
          return INTS;
        case 3: // INT_VAL
          return INT_VAL;
        case 4: // DOUBLE_VAL
          return DOUBLE_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOUBLES, new FieldMetaData("doubles", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, DoubleArray.class)));
    tmpMap.put(_Fields.INTS, new FieldMetaData("ints", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, IntArray.class)));
    tmpMap.put(_Fields.INT_VAL, new FieldMetaData("intVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DOUBLE_VAL, new FieldMetaData("doubleVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DataValue.class, metaDataMap);
  }

  public DataValue() {
    super();
  }

  public DataValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public DataValue(DataValue other) {
    super(other);
  }
  public DataValue deepCopy() {
    return new DataValue(this);
  }

  public static DataValue doubles(DoubleArray value) {
    DataValue x = new DataValue();
    x.setDoubles(value);
    return x;
  }

  public static DataValue ints(IntArray value) {
    DataValue x = new DataValue();
    x.setInts(value);
    return x;
  }

  public static DataValue intVal(int value) {
    DataValue x = new DataValue();
    x.setIntVal(value);
    return x;
  }

  public static DataValue doubleVal(double value) {
    DataValue x = new DataValue();
    x.setDoubleVal(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case DOUBLES:
        if (value instanceof DoubleArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type DoubleArray for field 'doubles', but got " + value.getClass().getSimpleName());
      case INTS:
        if (value instanceof IntArray) {
          break;
        }
        throw new ClassCastException("Was expecting value of type IntArray for field 'ints', but got " + value.getClass().getSimpleName());
      case INT_VAL:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'intVal', but got " + value.getClass().getSimpleName());
      case DOUBLE_VAL:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'doubleVal', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object readValue(TProtocol iprot, TField field) throws TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case DOUBLES:
          if (field.type == DOUBLES_FIELD_DESC.type) {
            DoubleArray doubles;
            doubles = new DoubleArray();
            doubles.read(iprot);
            return doubles;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INTS:
          if (field.type == INTS_FIELD_DESC.type) {
            IntArray ints;
            ints = new IntArray();
            ints.read(iprot);
            return ints;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case INT_VAL:
          if (field.type == INT_VAL_FIELD_DESC.type) {
            Integer intVal;
            intVal = iprot.readI32();
            return intVal;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VAL:
          if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
            Double doubleVal;
            doubleVal = iprot.readDouble();
            return doubleVal;
          } else {
            TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void writeValue(TProtocol oprot) throws TException {
    switch (setField_) {
      case DOUBLES:
        DoubleArray doubles = (DoubleArray)value_;
        doubles.write(oprot);
        return;
      case INTS:
        IntArray ints = (IntArray)value_;
        ints.write(oprot);
        return;
      case INT_VAL:
        Integer intVal = (Integer)value_;
        oprot.writeI32(intVal);
        return;
      case DOUBLE_VAL:
        Double doubleVal = (Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case DOUBLES:
        return DOUBLES_FIELD_DESC;
      case INTS:
        return INTS_FIELD_DESC;
      case INT_VAL:
        return INT_VAL_FIELD_DESC;
      case DOUBLE_VAL:
        return DOUBLE_VAL_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public DoubleArray getDoubles() {
    if (getSetField() == _Fields.DOUBLES) {
      return (DoubleArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubles' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubles(DoubleArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DOUBLES;
    value_ = value;
  }

  public IntArray getInts() {
    if (getSetField() == _Fields.INTS) {
      return (IntArray)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'ints' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setInts(IntArray value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.INTS;
    value_ = value;
  }

  public int getIntVal() {
    if (getSetField() == _Fields.INT_VAL) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'intVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setIntVal(int value) {
    setField_ = _Fields.INT_VAL;
    value_ = value;
  }

  public double getDoubleVal() {
    if (getSetField() == _Fields.DOUBLE_VAL) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubleVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleVal(double value) {
    setField_ = _Fields.DOUBLE_VAL;
    value_ = value;
  }

  public boolean equals(Object other) {
    if (other instanceof DataValue) {
      return equals((DataValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(DataValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(DataValue other) {
    int lastComparison = TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

}
