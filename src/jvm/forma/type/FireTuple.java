/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package forma.type;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FireTuple implements TBase<FireTuple, FireTuple._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FireTuple");

  private static final TField MAX_TEMP_FIELD_DESC = new TField("max_temp", TType.DOUBLE, (short)1);
  private static final TField TEMP_330_FIELD_DESC = new TField("temp_330", TType.I32, (short)2);
  private static final TField CONF_50_FIELD_DESC = new TField("conf_50", TType.I32, (short)3);
  private static final TField BOTH_PREDS_FIELD_DESC = new TField("both_preds", TType.I32, (short)4);
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);

  public double max_temp;
  public int temp_330;
  public int conf_50;
  public int both_preds;
  public int count;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    MAX_TEMP((short)1, "max_temp"),
    TEMP_330((short)2, "temp_330"),
    CONF_50((short)3, "conf_50"),
    BOTH_PREDS((short)4, "both_preds"),
    COUNT((short)5, "count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_TEMP
          return MAX_TEMP;
        case 2: // TEMP_330
          return TEMP_330;
        case 3: // CONF_50
          return CONF_50;
        case 4: // BOTH_PREDS
          return BOTH_PREDS;
        case 5: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAX_TEMP_ISSET_ID = 0;
  private static final int __TEMP_330_ISSET_ID = 1;
  private static final int __CONF_50_ISSET_ID = 2;
  private static final int __BOTH_PREDS_ISSET_ID = 3;
  private static final int __COUNT_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_TEMP, new FieldMetaData("max_temp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TEMP_330, new FieldMetaData("temp_330", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CONF_50, new FieldMetaData("conf_50", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BOTH_PREDS, new FieldMetaData("both_preds", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FireTuple.class, metaDataMap);
  }

  public FireTuple() {
  }

  public FireTuple(
    double max_temp,
    int temp_330,
    int conf_50,
    int both_preds,
    int count)
  {
    this();
    this.max_temp = max_temp;
    setMax_tempIsSet(true);
    this.temp_330 = temp_330;
    setTemp_330IsSet(true);
    this.conf_50 = conf_50;
    setConf_50IsSet(true);
    this.both_preds = both_preds;
    setBoth_predsIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FireTuple(FireTuple other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.max_temp = other.max_temp;
    this.temp_330 = other.temp_330;
    this.conf_50 = other.conf_50;
    this.both_preds = other.both_preds;
    this.count = other.count;
  }

  public FireTuple deepCopy() {
    return new FireTuple(this);
  }

  @Override
  public void clear() {
    setMax_tempIsSet(false);
    this.max_temp = 0.0;
    setTemp_330IsSet(false);
    this.temp_330 = 0;
    setConf_50IsSet(false);
    this.conf_50 = 0;
    setBoth_predsIsSet(false);
    this.both_preds = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public double getMax_temp() {
    return this.max_temp;
  }

  public FireTuple setMax_temp(double max_temp) {
    this.max_temp = max_temp;
    setMax_tempIsSet(true);
    return this;
  }

  public void unsetMax_temp() {
    __isset_bit_vector.clear(__MAX_TEMP_ISSET_ID);
  }

  /** Returns true if field max_temp is set (has been asigned a value) and false otherwise */
  public boolean isSetMax_temp() {
    return __isset_bit_vector.get(__MAX_TEMP_ISSET_ID);
  }

  public void setMax_tempIsSet(boolean value) {
    __isset_bit_vector.set(__MAX_TEMP_ISSET_ID, value);
  }

  public int getTemp_330() {
    return this.temp_330;
  }

  public FireTuple setTemp_330(int temp_330) {
    this.temp_330 = temp_330;
    setTemp_330IsSet(true);
    return this;
  }

  public void unsetTemp_330() {
    __isset_bit_vector.clear(__TEMP_330_ISSET_ID);
  }

  /** Returns true if field temp_330 is set (has been asigned a value) and false otherwise */
  public boolean isSetTemp_330() {
    return __isset_bit_vector.get(__TEMP_330_ISSET_ID);
  }

  public void setTemp_330IsSet(boolean value) {
    __isset_bit_vector.set(__TEMP_330_ISSET_ID, value);
  }

  public int getConf_50() {
    return this.conf_50;
  }

  public FireTuple setConf_50(int conf_50) {
    this.conf_50 = conf_50;
    setConf_50IsSet(true);
    return this;
  }

  public void unsetConf_50() {
    __isset_bit_vector.clear(__CONF_50_ISSET_ID);
  }

  /** Returns true if field conf_50 is set (has been asigned a value) and false otherwise */
  public boolean isSetConf_50() {
    return __isset_bit_vector.get(__CONF_50_ISSET_ID);
  }

  public void setConf_50IsSet(boolean value) {
    __isset_bit_vector.set(__CONF_50_ISSET_ID, value);
  }

  public int getBoth_preds() {
    return this.both_preds;
  }

  public FireTuple setBoth_preds(int both_preds) {
    this.both_preds = both_preds;
    setBoth_predsIsSet(true);
    return this;
  }

  public void unsetBoth_preds() {
    __isset_bit_vector.clear(__BOTH_PREDS_ISSET_ID);
  }

  /** Returns true if field both_preds is set (has been asigned a value) and false otherwise */
  public boolean isSetBoth_preds() {
    return __isset_bit_vector.get(__BOTH_PREDS_ISSET_ID);
  }

  public void setBoth_predsIsSet(boolean value) {
    __isset_bit_vector.set(__BOTH_PREDS_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public FireTuple setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been asigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_TEMP:
      if (value == null) {
        unsetMax_temp();
      } else {
        setMax_temp((Double)value);
      }
      break;

    case TEMP_330:
      if (value == null) {
        unsetTemp_330();
      } else {
        setTemp_330((Integer)value);
      }
      break;

    case CONF_50:
      if (value == null) {
        unsetConf_50();
      } else {
        setConf_50((Integer)value);
      }
      break;

    case BOTH_PREDS:
      if (value == null) {
        unsetBoth_preds();
      } else {
        setBoth_preds((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_TEMP:
      return new Double(getMax_temp());

    case TEMP_330:
      return new Integer(getTemp_330());

    case CONF_50:
      return new Integer(getConf_50());

    case BOTH_PREDS:
      return new Integer(getBoth_preds());

    case COUNT:
      return new Integer(getCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_TEMP:
      return isSetMax_temp();
    case TEMP_330:
      return isSetTemp_330();
    case CONF_50:
      return isSetConf_50();
    case BOTH_PREDS:
      return isSetBoth_preds();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FireTuple)
      return this.equals((FireTuple)that);
    return false;
  }

  public boolean equals(FireTuple that) {
    if (that == null)
      return false;

    boolean this_present_max_temp = true;
    boolean that_present_max_temp = true;
    if (this_present_max_temp || that_present_max_temp) {
      if (!(this_present_max_temp && that_present_max_temp))
        return false;
      if (this.max_temp != that.max_temp)
        return false;
    }

    boolean this_present_temp_330 = true;
    boolean that_present_temp_330 = true;
    if (this_present_temp_330 || that_present_temp_330) {
      if (!(this_present_temp_330 && that_present_temp_330))
        return false;
      if (this.temp_330 != that.temp_330)
        return false;
    }

    boolean this_present_conf_50 = true;
    boolean that_present_conf_50 = true;
    if (this_present_conf_50 || that_present_conf_50) {
      if (!(this_present_conf_50 && that_present_conf_50))
        return false;
      if (this.conf_50 != that.conf_50)
        return false;
    }

    boolean this_present_both_preds = true;
    boolean that_present_both_preds = true;
    if (this_present_both_preds || that_present_both_preds) {
      if (!(this_present_both_preds && that_present_both_preds))
        return false;
      if (this.both_preds != that.both_preds)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FireTuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FireTuple typedOther = (FireTuple)other;

    lastComparison = Boolean.valueOf(isSetMax_temp()).compareTo(typedOther.isSetMax_temp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_temp()) {
      lastComparison = TBaseHelper.compareTo(this.max_temp, typedOther.max_temp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemp_330()).compareTo(typedOther.isSetTemp_330());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemp_330()) {
      lastComparison = TBaseHelper.compareTo(this.temp_330, typedOther.temp_330);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConf_50()).compareTo(typedOther.isSetConf_50());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConf_50()) {
      lastComparison = TBaseHelper.compareTo(this.conf_50, typedOther.conf_50);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoth_preds()).compareTo(typedOther.isSetBoth_preds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoth_preds()) {
      lastComparison = TBaseHelper.compareTo(this.both_preds, typedOther.both_preds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MAX_TEMP
          if (field.type == TType.DOUBLE) {
            this.max_temp = iprot.readDouble();
            setMax_tempIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TEMP_330
          if (field.type == TType.I32) {
            this.temp_330 = iprot.readI32();
            setTemp_330IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CONF_50
          if (field.type == TType.I32) {
            this.conf_50 = iprot.readI32();
            setConf_50IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BOTH_PREDS
          if (field.type == TType.I32) {
            this.both_preds = iprot.readI32();
            setBoth_predsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COUNT
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(MAX_TEMP_FIELD_DESC);
    oprot.writeDouble(this.max_temp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TEMP_330_FIELD_DESC);
    oprot.writeI32(this.temp_330);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CONF_50_FIELD_DESC);
    oprot.writeI32(this.conf_50);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BOTH_PREDS_FIELD_DESC);
    oprot.writeI32(this.both_preds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FireTuple(");
    boolean first = true;

    sb.append("max_temp:");
    sb.append(this.max_temp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("temp_330:");
    sb.append(this.temp_330);
    first = false;
    if (!first) sb.append(", ");
    sb.append("conf_50:");
    sb.append(this.conf_50);
    first = false;
    if (!first) sb.append(", ");
    sb.append("both_preds:");
    sb.append(this.both_preds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

