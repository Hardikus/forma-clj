/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package forma.schema;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FireTuple implements TBase<FireTuple, FireTuple._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("FireTuple");

  private static final TField MAX_TEMP_FIELD_DESC = new TField("maxTemp", TType.DOUBLE, (short)1);
  private static final TField TEMP330_FIELD_DESC = new TField("temp330", TType.I32, (short)2);
  private static final TField CONF50_FIELD_DESC = new TField("conf50", TType.I32, (short)3);
  private static final TField BOTH_PREDS_FIELD_DESC = new TField("bothPreds", TType.I32, (short)4);
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);

  public double maxTemp;
  public int temp330;
  public int conf50;
  public int bothPreds;
  public int count;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    MAX_TEMP((short)1, "maxTemp"),
    TEMP330((short)2, "temp330"),
    CONF50((short)3, "conf50"),
    BOTH_PREDS((short)4, "bothPreds"),
    COUNT((short)5, "count");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_TEMP
          return MAX_TEMP;
        case 2: // TEMP330
          return TEMP330;
        case 3: // CONF50
          return CONF50;
        case 4: // BOTH_PREDS
          return BOTH_PREDS;
        case 5: // COUNT
          return COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXTEMP_ISSET_ID = 0;
  private static final int __TEMP330_ISSET_ID = 1;
  private static final int __CONF50_ISSET_ID = 2;
  private static final int __BOTHPREDS_ISSET_ID = 3;
  private static final int __COUNT_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_TEMP, new FieldMetaData("maxTemp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMap.put(_Fields.TEMP330, new FieldMetaData("temp330", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.CONF50, new FieldMetaData("conf50", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.BOTH_PREDS, new FieldMetaData("bothPreds", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(FireTuple.class, metaDataMap);
  }

  public FireTuple() {
  }

  public FireTuple(
    double maxTemp,
    int temp330,
    int conf50,
    int bothPreds,
    int count)
  {
    this();
    this.maxTemp = maxTemp;
    setMaxTempIsSet(true);
    this.temp330 = temp330;
    setTemp330IsSet(true);
    this.conf50 = conf50;
    setConf50IsSet(true);
    this.bothPreds = bothPreds;
    setBothPredsIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FireTuple(FireTuple other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.maxTemp = other.maxTemp;
    this.temp330 = other.temp330;
    this.conf50 = other.conf50;
    this.bothPreds = other.bothPreds;
    this.count = other.count;
  }

  public FireTuple deepCopy() {
    return new FireTuple(this);
  }

  @Override
  public void clear() {
    setMaxTempIsSet(false);
    this.maxTemp = 0.0;
    setTemp330IsSet(false);
    this.temp330 = 0;
    setConf50IsSet(false);
    this.conf50 = 0;
    setBothPredsIsSet(false);
    this.bothPreds = 0;
    setCountIsSet(false);
    this.count = 0;
  }

  public double getMaxTemp() {
    return this.maxTemp;
  }

  public FireTuple setMaxTemp(double maxTemp) {
    this.maxTemp = maxTemp;
    setMaxTempIsSet(true);
    return this;
  }

  public void unsetMaxTemp() {
    __isset_bit_vector.clear(__MAXTEMP_ISSET_ID);
  }

  /** Returns true if field maxTemp is set (has been asigned a value) and false otherwise */
  public boolean isSetMaxTemp() {
    return __isset_bit_vector.get(__MAXTEMP_ISSET_ID);
  }

  public void setMaxTempIsSet(boolean value) {
    __isset_bit_vector.set(__MAXTEMP_ISSET_ID, value);
  }

  public int getTemp330() {
    return this.temp330;
  }

  public FireTuple setTemp330(int temp330) {
    this.temp330 = temp330;
    setTemp330IsSet(true);
    return this;
  }

  public void unsetTemp330() {
    __isset_bit_vector.clear(__TEMP330_ISSET_ID);
  }

  /** Returns true if field temp330 is set (has been asigned a value) and false otherwise */
  public boolean isSetTemp330() {
    return __isset_bit_vector.get(__TEMP330_ISSET_ID);
  }

  public void setTemp330IsSet(boolean value) {
    __isset_bit_vector.set(__TEMP330_ISSET_ID, value);
  }

  public int getConf50() {
    return this.conf50;
  }

  public FireTuple setConf50(int conf50) {
    this.conf50 = conf50;
    setConf50IsSet(true);
    return this;
  }

  public void unsetConf50() {
    __isset_bit_vector.clear(__CONF50_ISSET_ID);
  }

  /** Returns true if field conf50 is set (has been asigned a value) and false otherwise */
  public boolean isSetConf50() {
    return __isset_bit_vector.get(__CONF50_ISSET_ID);
  }

  public void setConf50IsSet(boolean value) {
    __isset_bit_vector.set(__CONF50_ISSET_ID, value);
  }

  public int getBothPreds() {
    return this.bothPreds;
  }

  public FireTuple setBothPreds(int bothPreds) {
    this.bothPreds = bothPreds;
    setBothPredsIsSet(true);
    return this;
  }

  public void unsetBothPreds() {
    __isset_bit_vector.clear(__BOTHPREDS_ISSET_ID);
  }

  /** Returns true if field bothPreds is set (has been asigned a value) and false otherwise */
  public boolean isSetBothPreds() {
    return __isset_bit_vector.get(__BOTHPREDS_ISSET_ID);
  }

  public void setBothPredsIsSet(boolean value) {
    __isset_bit_vector.set(__BOTHPREDS_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public FireTuple setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bit_vector.clear(__COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been asigned a value) and false otherwise */
  public boolean isSetCount() {
    return __isset_bit_vector.get(__COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bit_vector.set(__COUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_TEMP:
      if (value == null) {
        unsetMaxTemp();
      } else {
        setMaxTemp((Double)value);
      }
      break;

    case TEMP330:
      if (value == null) {
        unsetTemp330();
      } else {
        setTemp330((Integer)value);
      }
      break;

    case CONF50:
      if (value == null) {
        unsetConf50();
      } else {
        setConf50((Integer)value);
      }
      break;

    case BOTH_PREDS:
      if (value == null) {
        unsetBothPreds();
      } else {
        setBothPreds((Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_TEMP:
      return new Double(getMaxTemp());

    case TEMP330:
      return new Integer(getTemp330());

    case CONF50:
      return new Integer(getConf50());

    case BOTH_PREDS:
      return new Integer(getBothPreds());

    case COUNT:
      return new Integer(getCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_TEMP:
      return isSetMaxTemp();
    case TEMP330:
      return isSetTemp330();
    case CONF50:
      return isSetConf50();
    case BOTH_PREDS:
      return isSetBothPreds();
    case COUNT:
      return isSetCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FireTuple)
      return this.equals((FireTuple)that);
    return false;
  }

  public boolean equals(FireTuple that) {
    if (that == null)
      return false;

    boolean this_present_maxTemp = true;
    boolean that_present_maxTemp = true;
    if (this_present_maxTemp || that_present_maxTemp) {
      if (!(this_present_maxTemp && that_present_maxTemp))
        return false;
      if (this.maxTemp != that.maxTemp)
        return false;
    }

    boolean this_present_temp330 = true;
    boolean that_present_temp330 = true;
    if (this_present_temp330 || that_present_temp330) {
      if (!(this_present_temp330 && that_present_temp330))
        return false;
      if (this.temp330 != that.temp330)
        return false;
    }

    boolean this_present_conf50 = true;
    boolean that_present_conf50 = true;
    if (this_present_conf50 || that_present_conf50) {
      if (!(this_present_conf50 && that_present_conf50))
        return false;
      if (this.conf50 != that.conf50)
        return false;
    }

    boolean this_present_bothPreds = true;
    boolean that_present_bothPreds = true;
    if (this_present_bothPreds || that_present_bothPreds) {
      if (!(this_present_bothPreds && that_present_bothPreds))
        return false;
      if (this.bothPreds != that.bothPreds)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FireTuple other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FireTuple typedOther = (FireTuple)other;

    lastComparison = Boolean.valueOf(isSetMaxTemp()).compareTo(typedOther.isSetMaxTemp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTemp()) {
      lastComparison = TBaseHelper.compareTo(this.maxTemp, typedOther.maxTemp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTemp330()).compareTo(typedOther.isSetTemp330());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTemp330()) {
      lastComparison = TBaseHelper.compareTo(this.temp330, typedOther.temp330);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConf50()).compareTo(typedOther.isSetConf50());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConf50()) {
      lastComparison = TBaseHelper.compareTo(this.conf50, typedOther.conf50);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBothPreds()).compareTo(typedOther.isSetBothPreds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBothPreds()) {
      lastComparison = TBaseHelper.compareTo(this.bothPreds, typedOther.bothPreds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = TBaseHelper.compareTo(this.count, typedOther.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MAX_TEMP
          if (field.type == TType.DOUBLE) {
            this.maxTemp = iprot.readDouble();
            setMaxTempIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TEMP330
          if (field.type == TType.I32) {
            this.temp330 = iprot.readI32();
            setTemp330IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CONF50
          if (field.type == TType.I32) {
            this.conf50 = iprot.readI32();
            setConf50IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BOTH_PREDS
          if (field.type == TType.I32) {
            this.bothPreds = iprot.readI32();
            setBothPredsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COUNT
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(MAX_TEMP_FIELD_DESC);
    oprot.writeDouble(this.maxTemp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TEMP330_FIELD_DESC);
    oprot.writeI32(this.temp330);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CONF50_FIELD_DESC);
    oprot.writeI32(this.conf50);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BOTH_PREDS_FIELD_DESC);
    oprot.writeI32(this.bothPreds);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FireTuple(");
    boolean first = true;

    sb.append("maxTemp:");
    sb.append(this.maxTemp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("temp330:");
    sb.append(this.temp330);
    first = false;
    if (!first) sb.append(", ");
    sb.append("conf50:");
    sb.append(this.conf50);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bothPreds:");
    sb.append(this.bothPreds);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

